<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security
   http://www.springframework.org/schema/security/spring-security-4.2.xsd
   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- Namespaces탭 : security 체크후 선택 > 오른쪽 4.2 버전 선택 -->
	<security:http pattern="/resources/**" security="none" />
	<security:http pattern="/common/**" security="none" />
	<security:http auto-config="true" use-expressions="true"
		create-session="never">
 
		<!-- 관리자 권한 영역 : 상품 -->
		<security:intercept-url pattern="/**.st"
			access="hasRole('ROLE_ADMIN')" />
			
		<!-- 관리자 권한 영역 : 주문관리 -->
		<security:intercept-url pattern="/**.ad"
			access="hasRole('ROLE_ADMIN')" />

		<!-- 권한에 관계없이 접속 가능: common -->
		<security:intercept-url pattern="/**.do"
			access="permitAll" />
 
		<!-- 로그인한 사용자 영역(customer + 관리자): board -->
		<security:intercept-url pattern="/**.bo"
			access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" /> 
 
		<!-- 로그인한 사용자 영역(customer + 관리자): shop -->
		<security:intercept-url pattern="/**.sh"
			access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" /> 
		
		<!-- 로그인한 사용자 영역(customer + 관리자): myAccount:주문확인, 환불신청 등 -->
		<security:intercept-url pattern="/**.my"
			access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" /> 

		<!-- 로그인폼 -->
		<security:form-login login-page="/login.do"
			login-processing-url="/loginAction.do"
			authentication-success-handler-ref="userLoginSuccessHandler"
			authentication-failure-handler-ref="userLoginFailureHandler"
			username-parameter="id" password-parameter="password" />
		<security:session-management>
		
		<!-- 같은 브라우저에서 여러창 동시접속수 / 세션만료시 이동할 주소 / 최대 세션 초과시 에러 옵션 -->
			<security:concurrency-control
				max-sessions="2" expired-url="/login.do"
				error-if-maximum-exceeded="true" />
		</security:session-management>

		<!-- 접근 권한이 없는 경우 작동 -->
		<security:access-denied-handler ref="userDeniedHandler" />
	   </security:http>
	   
	
		<!-- 로그인 성공시 작동 -->
		<bean id="userLoginSuccessHandler"
			class="com.spring.pj_117_lsj.service.security.UserLoginSuccessHandler">
			<constructor-arg name="sqlSession" ref="sqlSession" />
		</bean>
		
		<!-- 로그인 실패시 작동 -->
		<bean id="userLoginFailureHandler"
			class="com.spring.pj_117_lsj.service.security.UserloginFailureHandler">
			<constructor-arg name="sqlSession" ref="sqlSession" />
			<constructor-arg name="passwordEncoder"
				ref="bcryptPasswordEncoder" />
		</bean>
		
		<!-- 접근 권한이 없는 경우 작동 -->
		<bean id="userDeniedHandler"
			class="com.spring.pj_117_lsj.service.security.UserDeniedHandler">
	
		</bean>
	
		<!-- 로그인 인증처리 클래스 -->
		<!-- loginAction.do에의해 자동호출하므로 우리가 작성한 loginAction.do는 주석처리 -->
		<bean id="userService"
			class="com.spring.pj_117_lsj.service.security.UserAuthenticationService">
			<constructor-arg name="sqlSession" ref="sqlSession" />
		</bean>
	
		<!-- 비밀번호 암호화 클래스 -->
		<bean id="bcryptPasswordEncoder"
			class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
	
		</bean>


</beans>